package f5;
##
## $Id: f5.pm.in 3236 2016-01-22 07:06:23Z heas $
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  f5.pm - F5 BigIP v11 (tmsh) rancid procedures
#

use 5.010;
use strict 'vars';
use warnings;
no warnings 'uninitialized';
require(Exporter);
our @ISA = qw(Exporter);
$Exporter::Verbose=1;

use rancid @VERSION@;

our $found_hardware;

@ISA = qw(Exporter rancid main);
#our @EXPORT = qw($VERSION)

# load-time initialization
sub import {
    0;
}

# post-open(collection file) initialization
sub init {
    # add content lines and separators
    ProcessHistory("","","","#RANCID-CONTENT-TYPE: $devtype\n#\n");
    $found_hardware = 0;
    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

TOP: while (<$INPUT>) {
	tr/\015//d;
        if (/#\s?exit$/) {
            $clean_run = 1;
            last;
        }
	if (/^Error:/) {
	    print STDOUT ("$host f5login error: $_");
	    print STDERR ("$host f5login error: $_") if ($debug);
	    $clean_run=0;
	    last;
	}
	while (/#\s*($cmds_regexp)\s*$/) {
	    $cmd = $1;
	    if (!defined($prompt)) {
		$prompt = ($_ =~ /^([^#]+#)/)[0];
		$prompt =~ s/([][}{)(\\])/\\$1/g;
		print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	    }
	    print STDERR ("HIT COMMAND:$_") if ($debug);
	    if (! defined($commands{$cmd})) {
		print STDERR "$host: found unexpected command - \"$cmd\"\n";
		$clean_run = 0;
		last TOP;
	    }
	    $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
	    delete($commands{$cmd});
	    if ($rval == -1) {
		$clean_run = 0;
		last TOP;
	    }
            print (STDERR "clean_run=$clean_run | found_end=$found_end\n") if ($debug);
	}
    }
}

# This routine parses "clsh tmsh show /sys hardware" or "tmsh show /sys hardware"
sub ShowHardware {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowHardware: $_" if ($debug);

    while (<$INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        
        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        return(0) if ($found_hardware);

        s/\d+rpm//ig;
        s/^\|//;
        s/^\ \ ([0-9]+)(\ +).*up.*[0-9]/  $1$2up REMOVED/i;
        s/^\ \ ([0-9]+)(\ +).*Air\ Inlet/  $1$2REMOVED Air Inlet/i;
        s/^\ \ ([0-9]+)(\ +).*HSBe/  $1$2REMOVED HSBe/i;
        s/^\ \ ([0-9]+)(\ +).*TMP421 on die/  $1$2REMOVED TMP421 on die/i;
        s/^\ \ ([0-9]+)(\ +)[0-9]+\ +[0-9]+/  $1$2REMOVED     REMOVED/;
        /Type: / && ProcessHistory("COMMENTS","keysort","A0","#Chassis type: $'");
        ProcessHistory("COMMENTS","keysort","B1","#$_");
    }
    $found_hardware = 1;
    return(0);
}

# This routine parses "tmsh show /sys version"
sub ShowVersion {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowVersion: $_" if ($debug);
    
    while (<$INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        
        return(-1) if (/command authorization failed/i);

        if (/^kernel:/i && ($_ = <INPUT>)) {
            ProcessHistory("COMMENTS","keysort","A3","#Image: Kernel: $_");
            next;
        } elsif (/^package:/i) {
            my ($line);
            while ($_ = <INPUT>) {
                tr/\015//d;
                last if (/(:|^$prompt)/);
                chomp;
                $line .= " $_";
            }
            ProcessHistory("COMMENTS","keysort","A2","#Image: Package:$line\n");
        } elsif (/:/) {
            ProcessHistory("COMMENTS","keysort","C1","#$_");
        } else {
            ProcessHistory("COMMENTS","keysort","C1","#\t$_");
        }
    }

    return(0);
}

# This routine parses "tmsh show /sys license"
sub ShowLicense {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowLicense: $_" if ($debug);

    ProcessHistory("LICENSE","","","#\n#F5 BigIP Licence:\n");
    while (<$INPUT>) {
        tr/\015//d;
        # v9 software license does not have CR at EOF
        s/^#-+($prompt.*)/$1/;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        
        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        ProcessHistory("LICENSE","","","# $_");
    }
    
    return(0);
}

# This routine parses "cat /config/ZebOS.conf"
sub ShowZebOSconf {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowZebOSconf: $_" if ($debug);

    my ($line) = (0);
    while (<$INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        
        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        ProcessHistory("ZEBOSCONF","","","#\n#/config/ZebOS.conf:\n") if (!$line++);
        ProcessHistory("ZEBOSCONF","","","# $_");
    }

    return(0);
}

# This routine parses "lsof -n -i :179"
sub ShowZebOSsockets {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowZebOSsockets: $_" if ($debug);

    my ($line) = (0);
    while (<$INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);

        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);
        
        ProcessHistory("ZEBOSSOCKETS","","","#\n#lsof -n -i :179:\n") if (!$line++);

        ProcessHistory("ZEBOSSOCKETS","","","# $_");
    }

    return(0);
}

# This routine parses "bigpipe route static show"
sub ShowRouteStatic {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowRouteStatic: $_" if ($debug);

    while (<$INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);

        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        ProcessHistory("ROUTE","",""," $_") && next;
    }

    return(0);
}

# This routine parses "ls --full-time --color=never /config/ssl/ssl.crt"
sub ShowSslCrt {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowSslCrt: $_" if ($debug);

    while (<$INPUT>) {
        tr/\015//d;
        # v9 software license does not have CR at EOF
        s/^#-+($prompt.*)/$1/;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);

        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        ProcessHistory("SSLCRT","","","# $_");
    }

    return(0);
}

# This routine parses "ls --full-time --color=never /config/ssl/ssl.key"
sub ShowSslKey {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowSslKey: $_" if ($debug);

    while (<$INPUT>) {
        tr/\015//d;
        # v9 software license does not have CR at EOF
        s/^#-+($prompt.*)/$1/;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);

        return(1) if /^\s*\^\s*$/;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);  

        ProcessHistory("SSLKEY","","","# $_") && next;
    }

    return(0);
}

# This routine processes a "tmsh -q list"
sub WriteTermTMSH {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In WriteTerm: $_" if ($debug);

    my $lines = 0;
    ProcessHistory("","","","#\n");
    while (<$INPUT>) {
        tr/\015//d;
        return(0) if ($found_end);  # Only do this routine once
        if (/^$prompt/) { $found_end++; last; }
        next if (/^(\s*|\s*$cmd\s*)$/);

        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/command authorization failed/i);

        $lines++;

        s/state down$/state up/i; # Ignore monitor down state, save the config as up.
     
        if (/(bind-pw|encrypted-password|user-password-encrypted|passphrase) / && $filter_pwds >= 1) {
            ProcessHistory("ENABLE","","","# $1 <removed>\n");
        } else {
            ProcessHistory("","","","$_");
        }  
    }
    
    if ($lines < 3) {
        printf(STDERR "ERROR: $host configuration appears truncated.\n") if ($debug);
        $found_end = 0;
        return(-1);
    }
    
    return(0);
}

1;
