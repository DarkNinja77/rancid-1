#! @EXPECT_PATH@ --
##
## $Id: clogin.in 3057 2015-03-13 20:32:14Z heas $
##
## @PACKAGE@ @VERSION@
## Copyright (c) @COPYYEARS@ by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##    must display the following acknowledgement:
##        This product includes software developed by Terrapin Communications,
##        Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##    contributors may be used to endorse or promote products derived from
##    this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##    back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
#
#  The expect login scripts were based on Erik Sherk's gwtn, by permission.
#
# clogin - Cisco login
#
# Most options are intuitive for logging into a Cisco router.
# The default is to enable (thus -noenable).  Some folks have
# setup tacacs to have a user login at priv-lvl = 15 (enabled)
# so the -autoenable flag was added for this case (don't go through
# the process of enabling and the prompt will be the "#" prompt.
# The default username password is the same as the vty password.
#

# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 45
# # Some CLIs having problems if we write too fast (Extreme, PIX, Cat)
set send_human {.2 .1 .4 .2 1}

@login_top@

# Specific variables for F5
set bash 0

# Log into the router.
# returns: 0 on success, 1 on failure, -1 if rsh was used successfully
proc login { router user userpswd passwd cmethod cyphertype identfile } {
    global command spawn_id in_proc do_command do_script platform passphrase
    global prompt prompt_match u_prompt p_prompt e_prompt sshcmd
    set in_proc 1
    set uprompt_seen 0

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
        incr progs -1
        if [string match "telnet*" $prog] {
            regexp {telnet(:([^[:space:]]+))*} $prog methcmd suffix port
            if {"$port" == ""} {
                set retval [catch {spawn telnet $router} reason]
            } else {
                set retval [catch {spawn telnet $router $port} reason]
            }
            if { $retval } {
                send_user "\nError: telnet failed: $reason\n"
                return 1
            }
        } elseif [string match "ssh*" $prog] {
            # ssh to the router & try to login with or without an identfile.
            regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
            set cmd $sshcmd
            if {"$port" != ""} {
                append cmd " -p $port"
            }
            if {"$identfile" != ""} {
                append cmd " -i $identfile"
            }
            if {"$cyphertype" != ""} {
                append cmd " -c $cyphertype"
            }
            set retval [catch {eval spawn [split "$cmd -x -l $user $router" { }]} reason]
            if { $retval } {
                send_user "\nError: $cmd failed: $reason\n"
                return 1
            }
        } else {
            send_user "\nError: unknown connection method: $prog\n"
            return 1
        }
        sleep 0.3

        # This helps cleanup each expect clause.
        expect_after {
            timeout {
                send_user "\nError: TIMEOUT reached\n"
                catch {close}; catch {wait};
                if { $in_proc} {
                    return 1
                } else {
                    continue
                }
            }
            eof {
                send_user "\nError: EOF received\n"
                catch {close}; catch {wait};
                if { $in_proc} {
                    return 1
                } else {
                    continue
                }
            }
        }

        # Here we get a little tricky.  There are several possibilities:
        # the router can ask for a username and passwd and then
        # talk to the TACACS server to authenticate you, or if the
        # TACACS server is not working, then it will use the enable
        # passwd.  Or, the router might not have TACACS turned on,
        # then it will just send the passwd.
        # if telnet fails with connection refused, try ssh
        expect {
            -re "^<-+ More -+>\[^\n\r]*" {
                # ASA will use the pager for long banners
                send " ";
                exp_continue
            }
            -re "(Connection refused|Secure connection \[^\n\r]+ refused)" {
                catch {close}; catch {wait};
                if !$progs {
                    send_user "\nError: Connection Refused ($prog): $router\n"
                    return 1
                }
            }
            -re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
                catch {close}; catch {wait};
                if !$progs {
                    send_user "\nError: Connection closed ($prog): $router\n"
                    return 1
                }
            }
            eof { send_user "\nError: Couldn't login: $router\n"; wait; return 1 }
            -nocase "unknown host\r" {
                send_user "\nError: Unknown host $router\n";
                catch {close}; catch {wait};
                return 1
            }
            "Host is unreachable" {
                send_user "\nError: Host Unreachable: $router\n";
                catch {close}; catch {wait};
                return 1
            }
            "No address associated with name" {
                send_user "\nError: Unknown host $router\n";
                catch {close}; catch {wait};
                return 1
            }
            -re "(Host key not found |The authenticity of host .* be established).* \\(yes/no\\)\\?" {
                send "yes\r"
                send_user "\nHost $router added to the list of known hosts.\n"
                exp_continue
            }
            -re "HOST IDENTIFICATION HAS CHANGED.* \\(yes/no\\)\\?" {
                send "no\r"
                send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
                catch {close}; catch {wait};
                return 1
            }
            -re "HOST IDENTIFICATION HAS CHANGED\[^\n\r]+" {
                send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
                return 1
            }
            -re "Offending key for .* \\(yes/no\\)\\?" {
                send "no\r"
                send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
                catch {close}; catch {wait};
                return 1
            }
            -re "(denied|Sorry)"	{
                send_user "\nError: Check your passwd for $router\n"
                catch {close}; catch {wait}; return 1
            }
            "Login failed"		{
                send_user "\nError: Check your passwd for $router\n"
                catch {close}; catch {wait}; return 1
            }
            -re "% (Bad passwords|Authentication failed)"	{
                send_user "\nError: Check your passwd for $router\n"
                catch {close}; catch {wait}; return 1
            }
            "Press any key to continue" {
                # send_user "Pressing the ANY key\n"
                send "\r"
                exp_continue
            }
            -re "Last login:"	{
                exp_continue
            }
            -re "Press the <tab> key \[^\r\n]+\[\r\n]+"	{
                exp_continue
            }
            -re "@\[^\r\n]+ $p_prompt"	{
                # ssh pwd prompt
                sleep 1
                send -- "$userpswd\r"
                exp_continue
            }
            -re "Enter passphrase.*: " {
                # sleep briefly to allow time for stty -echo
                sleep .3
                send -- "$passphrase\r"
                exp_continue
            }
            -re "$u_prompt"		{
                send -- "$user\r"
                set uprompt_seen 1
                exp_continue
            }
            -re "$p_prompt"		{
                sleep 1
                if {$uprompt_seen == 1} {
                    send -- "$userpswd\r"
                } else {
                    send -- "$passwd\r"
                }
                exp_continue
            }
            -re "$prompt"		{
                set prompt_match $expect_out(0,string);
                break;
            }
            "Login invalid"		{
                send_user "\nError: Invalid login: $router\n";
                catch {close}; catch {wait}; return 1
            }
            -re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
        }
    }

    set in_proc 0
    return 0
}

# Turn to Bash
proc do_bash {} {
    global do_saveconfig in_proc
    global prompt enacmd
    set in_proc 1

    send "$enacmd\n"
    expect {
        "Syntax Error: unexpected argument" {
            send_user "\n Error: Unrecognized command, check your enable command\n";
            return 1
        }
        -re "\\].*#" {}
    }
    set in_proc 0
    return 0
}

proc get_prompt { prompt } {
    global platform
    # we are logged in, now figure out the full prompt
    set in_proc 1
    send "\r"
    regsub -all {^(\^*)(.*)} $prompt {\2} reprompt
    expect {
        -re "\[\r\n]+"          { exp_continue; }
        -re "^.+$reprompt"      { 
            set junk $expect_out(0,string);
            regsub -all "\[\]\[\(\)+]" $junk {\\&} prompt;
            regsub "\]\s.*\s#" $prompt {] \.*} prompt;
        }
    }
    set in_proc 0
    return $prompt
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global do_saveconfig in_proc platform
    set in_proc 1

    set reprompt $prompt

    #send_user -- "DEBUG: reprompt=$reprompt\n"

    # this is the only way i see to get rid of more prompts in o/p..grrrrr
    log_user 0

    # handle escaped ;s in commands, and ;; and ^;
    regsub -all {([^\\]);;} $command "\\1;\u002;" esccommand
    regsub {^;} $esccommand "\u002;" command
    set sep "\\1\u001"
    regsub -all {([^\\]);} $command "$sep" esccommand
    set sep "\u001"
    set commands [split $esccommand $sep]
    set num_commands [llength $commands]
    # the pager can not be turned off on the PIX, so we have to look
    # for the "More" prompt.  the extreme is equally obnoxious in pre-12.3 XOS,
    # with a global switch in the config.
    for {set i 0} {$i < $num_commands} { incr i} {
        if { [lindex $commands $i] == "\u002" } {
            send -- "\r"
        } else {
            set l_cmd [subst -nocommands [lindex $commands $i]]
            send -- "$l_cmd\r"
        }
        expect {
            -re "\b+" { exp_continue }
            -re "^\[^\n\r *]*$reprompt" { send_user -- "$expect_out(buffer)" }
            -re "^\[^\n\r]*$reprompt." { 
                send_user -- "$expect_out(buffer)"
                exp_continue
            }
            -re "\[^\r\n]*\[\n\r]+" {
                send_user -- "$expect_out(buffer)"
                exp_continue
            }
            -re "\[^\r\n]*Press <SPACE> to cont\[^\r\n]*" {
                send " "
                # bloody ^[[2K after " "
                expect -re "^\[^\r\n]*\r" {}
                exp_continue
            }
            -re "^ *--More--\[^\n\r]*" {
                send " "
                exp_continue 
            }
            -re "^<-+ More -+>\[^\n\r]*" {
                send_user -- "$expect_out(buffer)"
                send " "
                exp_continue 
            }
        }
    }
    log_user 1
    send "\n"
    expect {
        -re "\\(tmos.*\\)#" {
            send -h "quit\n"
            exp_continue;
        }
        -re "$reprompt" {
            send -h "exit\n"
            exp_continue;
        }
        "Do you wish to save your configuration changes" {
            if {$do_saveconfig} {
                catch {send "y\r"}
            } else {
                catch {send "n\r"}
            }
            exp_continue
        }
        -re "\[\n\r]+" { exp_continue }
        -re "^logout$" {}
        timeout { 
            catch {close}; catch {wait};
        }
        eof {}
    }

    set in_proc 0
    return 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
set prompt_match ""
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    # attempt at platform switching.
    set platform ""
    send_user -- "$router\n"

    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
        set timeout $timeoutdflt
    }

    # Default prompt.
    set prompt [join [find prompt $router] ""]
    if { [llength $prompt] == 0 } {
        set prompt "(\\)|\\]).*#"
    }

    # Look for enable options in .cloginrc & cmd-line
    if { $avenable == 0 } {
        set bash 0
    } else {
        set ne [find noenable $router]
        if { "$ne" == "1" } {
            set bash 0
        } else {
            set bash 1
        }
    }

    # Figure out passwords
    if { $do_passwd } {
        set pswd [find password $router]
        if { [llength $pswd] == 0 } {
            send_user -- "\nError: no password for $router in $password_file.\n"
            continue
        }
        set passwd [join [lindex $pswd 0] ""]
    } else {
        set passwd $userpasswd
    }

    # Figure out username
    if {[info exists username]} {
        # command line username
        set ruser $username
    } else {
        set ruser [join [find user $router] ""]
        if { "$ruser" == "" } { set ruser $default_user }
    }

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
        # command line username
        set userpswd $userpasswd
    } else {
        set userpswd [join [find userpassword $router] ""]
        if { "$userpswd" == "" } { set userpswd $passwd }
    }

    # Figure out enable command
    set enacmd [join [find enablecmd $router] ""]
    if { "$enacmd" == "" } { set enacmd "bash" }

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
        set u_prompt "(\[Uu]sername|Login|login|user name|User):"
    } else {
        set u_prompt [join [lindex $u_prompt 0] ""]
    }
    set p_prompt [find passprompt $router]
    if { "$p_prompt" == "" } {
        set p_prompt "(\[Pp]assword|passwd|Enter password for \[^ :]+):"
    } else {
        set p_prompt [join [lindex $p_prompt 0] ""]
    }

    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out passphrase to use
    if {[info exists avpassphrase]} {
        set passphrase $avpassphrase
    } else {
        set passphrase [join [lindex [find passphrase $router] 0] ""]
    }
    if { ! [string length "$passphrase"]} {
        set passphrase $passwd
    }

    # Figure out cypher type
    if {[info exists cypher]} {
        # command line cypher type
        set cyphertype $cypher
    } else {
        set cyphertype [find cyphertype $router]
        #if { "$cyphertype" == "" } { set cyphertype "3des" }
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{ssh} {telnet}} }

    # Figure out the SSH executable name
    set sshcmd [join [lindex [find sshcmd $router] 0] ""]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Login to the router
    if {[login $router $ruser $userpswd $passwd $cmethod $cyphertype $identfile]} {
        incr exitval
        # if login failed or rsh was unsuccessful, move on to the next device
        continue
    }
    # Figure out the prompt.
    if { [regexp -- "(\\])" $prompt_match junk] == 1 } {
        set bash 0
    }

    if { $bash } {
        if {[do_bash]} {
            if { $do_command || $do_script } {
                incr exitval
                catch {close}; catch {wait};
                continue
            }
        }
    }
    # we are logged in, now figure out the full prompt
    set prompt [get_prompt $prompt]

    if { $do_command || $do_script } {
        send -- "stty cols 255\r"
        expect -re $prompt      {}
        send -- "stty rows 60\r"
        expect -re $prompt      {}
    }

    if { $do_command } {
        if {[run_commands $prompt $command]} {
            incr exitval
            continue
        }
    } elseif { $do_script } {
        source $sfile
        catch {close};
    } else {
        label $router
        log_user 1
        interact
    }

    # End of for each router
    catch {wait};
    sleep 0.3
}

exit $exitval
