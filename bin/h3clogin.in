#! @EXPECT_PATH@ --
##
## $Id: $
##
## @PACKAGE@ @VERSION@
## Copyright (c) @COPYYEARS@ by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##	notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##	notice, this list of conditions and the following disclaimer in the
##	documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##	must display the following acknowledgement:
##		This product includes software developed by Terrapin Communications,
##		Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##	contributors may be used to endorse or promote products derived from
##	this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##	back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
#
#  The expect login scripts were based on Erik Sherk's gwtn, by permission.

#
# h3clogin
#
# h3clogin/h3crancid covers the following product ranges:
#
#  * 3Com SuperStack 4 (post-joint venture with Huawei)
#  * H3C
#  * HP Networking ('A' & some 'E' portfolio, post 2010 3Com acquitision)
#
# They may also work with some Huawei equipment.
#
# https://sites.google.com/site/jrbinks/code/rancid/h3c
#

# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 45
# Some CLIs having problems if we write too fast (Extreme, PIX, Cat)
set send_human {.1 .3 .7 .05 2}

@login_top@

# spawn tty options
set spawnopts {}

# H3C: some models don't like "3des"; specify "aes128-cbc" in .cloginrc
set default_cyphertype "3des"

# H3C: most H3C-derived models use "super" to elevate privileges
# However MA5600 uses "enable"
set enacmd "super"
set enacmd_alt "enable"

# H3C: command to exit from device
set exitcmd "quit"

# Log into the router.
# returns: 0 on success, 1 on failure, -1 if rsh was used successfully
proc login { router user userpswd passwd enapasswd cmethod cyphertype identfile } {
	global command spawn_id in_proc do_command do_script platform passphrase
	global prompt prompt_match u_prompt p_prompt e_prompt sshcmd spawnopts
	set in_proc 1
	set uprompt_seen 0

	# try each of the connection methods in $cmethod until one is successful
	set progs [llength $cmethod]
	foreach prog [lrange $cmethod 0 end] {
		incr progs -1
		if [string match "telnet*" $prog] {
			regexp {telnet(:([^[:space:]]+))*} $prog methcmd suffix port
			if {"$port" == ""} {
				#set retval [catch {spawn telnet $router} reason]
				set cmd "telnet $router"
			} else {
				#set retval [catch {spawn telnet $router $port} reason]
				set cmd "telnet $router $port"
			}
			set retval [catch {eval spawn $spawnopts [split $cmd { }]} reason]
			if { $retval } {
				send_user "\nError: telnet failed: $reason\n"
				return 1
			}
		} elseif [string match "ssh*" $prog] {
			# ssh to the router & try to login with or without an identfile.
			regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
			set cmd $sshcmd
			if {"$port" != ""} {
				set cmd "$cmd -p $port"
			}
			if {"$identfile" != ""} {
				set cmd "$cmd -i $identfile"
			}
			set retval [catch {eval spawn [split "$cmd -c $cyphertype -x -l $user $router" { }]} reason]
			if { $retval } {
				send_user "\nError: $cmd failed: $reason\n"
				return 1
			}
		} elseif ![string compare $prog "rsh"] {
			if { ! $do_command } {
				if { [llength $cmethod] == 1 } {
					send_user "\nError: rsh is an invalid method for -x and "
					send_user "interactive logins\n"
				}
				if { $progs == 0 } {
					return 1
				}
				continue;
			}

			set commands [split $command \;]
			set num_commands [llength $commands]
			set rshfail 0
			for {set i 0} {$i < $num_commands && !$rshfail} { incr i} {
				log_user 0
				set retval [catch {spawn rsh $user@$router [lindex $commands $i] } reason]
				if { $retval } {
					send_user "\nError: rsh failed: $reason\n"
					log_user 1; return 1
				}
				send_user "$router# [lindex $commands $i]\n"

				# rcmd does not get a pager and no prompts, so we just have to
				# look for failures & lines.
				expect {
					"Connection refused"  { 
						catch {close}; catch {wait};
						send_user "\nError: Connection\
						Refused ($prog): $router\n"
						set rshfail 1
					}
					-re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
						catch {close}; catch {wait};
						send_user "\nError: Connection\
						closed ($prog): $router\n"
						set rshfail 1
					}
					"Host is unreachable" { 
						catch {close}; catch {wait};
						send_user "\nError: Host Unreachable: $router\n"
						set rshfail 1
					}
					"No address associated with" {
						catch {close}; catch {wait};
						send_user "\nError: Unknown host $router\n"
						set rshfail 1
					}
					-re "\b+" { exp_continue }
					-re "\[\n\r]+" { send_user -- "$expect_out(buffer)"
						exp_continue
					}
					timeout { 
						catch {close}; catch {wait};
						send_user "\nError: TIMEOUT reached\n"
						set rshfail 1
					}
					eof { catch {close}; catch {wait}; }
				}
				log_user 1
			}
			if { $rshfail } {
				if { !$progs } {
					return 1
				} else {
					continue
				}
			}
			# fake the end of the session for rancid.
			send_user "$router# exit\n"
			# return rsh "success"
			return -1
		} else {
			send_user "\nError: unknown connection method: $prog\n"
			return 1
		}
		sleep 0.3

		# This helps cleanup each expect clause.
		expect_after {
			timeout {
				send_user "\nError: TIMEOUT reached\n"
				catch {close}; catch {wait};
				if { $in_proc} {
					return 1
				} else {
					continue
				}
			}
			eof {
				send_user "\nError: EOF received\n"
				catch {close}; catch {wait};
				if { $in_proc} {
					return 1
				} else {
					continue
				}
			}
		}

		# Here we get a little tricky.  There are several possibilities:
		# the router can ask for a username and passwd and then
		# talk to the TACACS server to authenticate you, or if the
		# TACACS server is not working, then it will use the enable
		# passwd.  Or, the router might not have TACACS turned on,
		# then it will just send the passwd.
		# if telnet fails with connection refused, try ssh
		expect {
			-re "(Connection refused|Secure connection \[^\n\r]+ refused)" {
				catch {close}; catch {wait};
				if !$progs {
					send_user "\nError: Connection Refused ($prog): $router\n"
					return 1
				}
			}
			-re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
				catch {close}; catch {wait};
				if !$progs {
					send_user "\nError: Connection closed ($prog): $router\n"
					return 1
				}
			}
			eof { send_user "\nError: Couldn't login: $router\n"; wait; return 1 }
			-nocase "unknown host\r" {
				send_user "\nError: Unknown host $router\n";
				catch {close}; catch {wait};
				return 1
			}
			"Host is unreachable" {
				send_user "\nError: Host Unreachable: $router\n";
				catch {close}; catch {wait};
				return 1
			}
			"No address associated with name" {
				send_user "\nError: Unknown host $router\n";
				catch {close}; catch {wait};
				return 1
			}
			-re "(Host key not found |The authenticity of host .* be established).* \\(yes\/no\\)\\?" {
				send "yes\r"
				send_user "\nHost $router added to the list of known hosts.\n"
				exp_continue
			}
			-re "HOST IDENTIFICATION HAS CHANGED.* \\(yes\/no\\)\\?" {
				send "no\r"
				send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
				catch {close}; catch {wait};
				return 1
			}
			-re "HOST IDENTIFICATION HAS CHANGED\[^\n\r]+" {
				send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
				return 1
			}
			-re "Offending key for .* \\(yes\/no\\)\\?" {
				send "no\r"
				send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
				catch {close}; catch {wait};
				return 1
			}
			-re "(denied|Sorry)"	{
				send_user "\nError: Check your passwd for $router\n"
				catch {close}; catch {wait}; return 1
			}
			"Login failed"		{
				send_user "\nError: Check your passwd for $router\n"
				catch {close}; catch {wait}; return 1
			}
			-re "% (Bad passwords|Authentication failed)"	{
				send_user "\nError: Check your passwd for $router\n"
				catch {close}; catch {wait}; return 1
			}
			"Press any key to continue" {
				# send_user "Pressing the ANY key\n"
				send "\r"
				exp_continue
			}
			" Press Y or ENTER to continue, N to exit." {
				# send_user "Pressing the ANY key\n"
				send "\r"
				exp_continue
			}
			-re "Enter Selection: " {
				# Catalyst 1900s have some lame menu.  Enter
				# K to reach a command-line.
				send "K\r"
				exp_continue
			}
			-re "Last login:"	{
				exp_continue
			}
			-re "@\[^\r\n]+ $p_prompt"	{
				# ssh pwd prompt
				#sleep 1
				send -- "$userpswd\r"
				exp_continue
			}
			-re "Enter passphrase.*: " {
				# sleep briefly to allow time for stty -echo
				sleep .3
				send -- "$passphrase\r"
				exp_continue
			}
			-re "$u_prompt" {
				send -- "$user\r"
				set uprompt_seen 1
				exp_continue
			}
			-re "$p_prompt" {
				#sleep 1
				if {$uprompt_seen == 1} {
					send -- "$userpswd\r"
				} else {
					send -- "$passwd\r"
				}
				exp_continue
			}
			-re "$prompt" {
				set prompt_match $expect_out(0,string);
				break;
			}
			"Login invalid" {
				send_user "\nError: Invalid login: $router\n";
				catch {close}; catch {wait}; return 1
			}
		}
	}

	set in_proc 0
	return 0
}

# Enable
proc do_enable { enauser enapasswd } {
	global do_saveconfig in_proc
	global prompt u_prompt e_prompt
	global enacmd enacmd_alt
	set in_proc 1

	# Try and determine a bit more about this device to modify behaviour.
	# We are careful to use "dis version " rather than the full length
	# "display version" to prevent h3crancid matching it.
	# (Thx Andrea Gabellini)
	send "dis version\r"
	expect {
		-re "---- More ----" { send -- " "; exp_continue }
		-re "\{ .* \}:" { send -- "\r"; exp_continue }
		"VERSION : MA5600" { set enacmd $enacmd_alt; exp_continue }
		-re $prompt {}
	}

	send "$enacmd\r"
	expect {
		-re "Please input the password to change the privilege level, press CTRL_C to abort.\n" {
			exp_continue
		}
		-re "$u_prompt"	{ send -- "$enauser\r"; exp_continue }
		-re "$e_prompt"	{ send -- "$enapasswd\r"; exp_continue }
		-re ">"		{ set prompt ">" }
		-re "#"		{ set prompt "#" }	# MA5600
		"% Password is not set." { 
			# H3C
			send_user "\nError: No 'super' password set for device\n"
			return 1
		}
		"% Authenticate failed." { # H3C
			send_user "\nError: Check your enable password for 'super'\n"
			return 1
		}
	}
	# We set the prompt variable (above) so script files don't need
	# to know what it is.
	set in_proc 0
	return 0
}

proc get_prompt { prompt } {
	global platform
	# we are logged in, now figure out the full prompt
	set in_proc 1
	send "\r"
	expect {
		-re "\[\r\n]+" { exp_continue; }
		-re "^.+$prompt" {
			set junk $expect_out(0,string);
			regsub -all "\[\]\[\(\)]" $junk {\\&} prompt;
		}
	}
	set in_proc 0
	return $prompt
}

# Run commands given on the command line.
proc run_commands { prompt command } {
	global do_saveconfig in_proc platform
	global exitcmd timeoutdflt
	set in_proc 1

	# If platform H3C:
	# Note that if the "system-view" command is sent to go into configuration
	# mode, the prompt changes from <prompt> to [prompt], so we need to ensure
	# that $reprompt will handle either.
	#send_user -- "Prompt: $prompt\n"
	# Strip inital and leading <>
	regsub -all {(^<|>\a?$)} $prompt {} prompt
	# Escape special characters to be treated as literals
	regsub -all {[][)(]} $prompt {\\&} prompt
	# Prefix and suffix with regexps to match the sets <[ and ]>
	set xlist [list {[<[]} $prompt {.*[]>]\a?}]
	set reprompt [join $xlist ""]

	send -- "\r"
	expect {
		-re ($reprompt|$prompt) { }
		-re "\[\n\r]+" { exp_continue }
	}

	# this is the only way i see to get rid of more prompts in o/p..grrrrr
	log_user 0

	set commands [split $command \;]
	set num_commands [llength $commands]
	# The pager can not be turned off on some 3Com/H3C, so we have to look
	# for the "More" prompt.
	for {set i 0} {$i < $num_commands} { incr i} {
		if { [lindex $commands $i] == "\u002" } {
			send -- "\r"
		} else {
			set l_cmd [subst -nocommands [lindex $commands $i]]
			send -- "$l_cmd\r"
			if { [string match {"^hostname"} $l_cmd] } { 
				set prompt [ get_prompt "(>|])"]
				regsub -all {(^<|>\a?$)} $prompt {} prompt
				regsub -all {[][)(]} $prompt {\\&} prompt
				set xlist [list {[<[]} $prompt {.*[]>]\a?}]
				set reprompt [join $xlist ""]
			}
		}
		# Du to some problems with H3C command with "no return in console" during the execution, we increase the timeout to 5 minutes during these commands
		# So, we need to save the current timeout value
		expect {
			-re "Please input banner content, and quit with the character \'(.)\'\.?\[\n\r]+" {
				set endchar $expect_out(1,string)
				send_user -- "$expect_out(buffer)"
				for {set j [ expr $i + 1 ]} {$j < $num_commands} {incr j} {
					send -- "[subst -nocommands [lindex $commands $j]]\r"
					expect {
						-re "^\[^\n\r *]*$reprompt" { send_user -- "$expect_out(buffer)"; break }
						-re "^.*\r\n" { send_user -- "$expect_out(buffer)" }
					}
				}
				set i [ expr $j ]
			}
			-re {(The contents cannot be restored!!! Delete .+\?\s?\[Y/N\]:|Copy .+ to .+\?\s?\[Y/N\]:|This command will set the boot file of the specified board. Continue\?\s?\[Y/N\]:)} {
				set timeout 300
				send -- "Y\r"
				send_user -- "$expect_out(buffer)"
				exp_continue
			}
			-re {^Save or display diagnostic information \(Y=save, N=display\)\? \[Y/N\]:} {
				send -- "N\r"
				send_user -- "$expect_out(buffer)"
				exp_continue
			}
			-re {The file .+ exists. Overwrite it\?\s?\[Y/N\]:} {
				send -- "N\r"
				send_user -- "$expect_out(buffer)"
				exp_continue
			}
			-re "\b+" { exp_continue }
			-re "^\[^\n\r *]*$reprompt"	{ 
				set timeout $timeoutdflt
				send_user -- "$expect_out(buffer)" 
			}
			-re "^\[^\n\r]*$reprompt." { 
				send_user -- "$expect_out(buffer)"
				exp_continue 
			}
			-re "\[\n\r]+" { 
				send_user -- "$expect_out(buffer)"
				exp_continue 
			}
			-re "^ {0,2}-+ More .*-+.*\[^\n\r]*" {
				# H3C pager prompt
				sleep 0.1
				send " "
				exp_continue 
			}
			-re "^---- More ----\[^\n\r]*" {
				# Comware7 pager prompt
				sleep 0.1
				send " "
				exp_continue 
			}
			-re "." {
				send_user -- "$expect_out(buffer)"
				exp_continue
			}
		}
	}
	log_user 1
	send "$exitcmd\r"

	expect {
		-re "^\[^\n\r *]*$reprompt"	{
			# H3C:
			# they return to non-enabled
			# mode with "exit" from
			# enabled mode.
			send "$exitcmd\r"
			exp_continue;
		}
		-re "\[\n\r]+" { exp_continue }
		-re "\[^\n\r *]Note:" { return 0 }
		timeout { 
			catch {close}; catch {wait};
			return 0
		}
		eof { return 0 }
	}
	set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
set prompt_match ""
set enable 0
# if we have dont have a tty, we need some additional terminal settings
if [catch {stty} reason] {
	# no tty, ie: cron
	set spawnopts "-nottycopy"
	set stty_init "cols 132"
}
foreach router [lrange $argv $i end] {
	set router [string tolower $router]
	# attempt at platform switching.
	set platform ""
	send_user -- "$router\n"

	# device timeout
	set timeout [find timeout $router]
	if { [llength $timeout] == 0 } {
		set timeout $timeoutdflt
	}

	# Default prompt.
	set prompt [join [find prompt $router] ""]
	if { [llength $prompt] == 0 } {
		set prompt "(>|])\a?"
	}

	# look for enable option in .cloginrc
	if { $avenable == 0 } {
		set enable 0
	} else {
		set ne [find noenable $router]
		if { "$ne" == "1" || "$autoenable" == "1" } {
			set enable 0
		} else {
			set enable 1
		}
	}

	# Figure out passwords
	if { $do_passwd || $do_enapasswd } {
		set pswd [find password $router]
		if { [llength $pswd] == 0 } {
			send_user -- "\nError: no password for $router in $password_file.\n"
			continue
		}
		if { $enable && $do_enapasswd && $autoenable == 0 && [llength $pswd] < 2 } {
			send_user -- "\nError: no enable password for $router in $password_file.\n"
			continue
		}
		set passwd [join [lindex $pswd 0] ""]
		set enapasswd [join [lindex $pswd 1] ""]
	} else {
		set passwd $userpasswd
		set enapasswd $enapasswd
	}

	# Figure out username
	if {[info exists username]} {
		# command line username
		set ruser $username
	} else {
		set ruser [join [find user $router] ""]
		if { "$ruser" == "" } { set ruser $default_user }
	}

	# Figure out username's password (if different from the vty password)
	if {[info exists userpasswd]} {
		# command line username
		set userpswd $userpasswd
	} else {
		set userpswd [join [find userpassword $router] ""]
		if { "$userpswd" == "" } { set userpswd $passwd }
	}

	# Figure out enable username
	if {[info exists enausername]} {
		# command line enausername
		set enauser $enausername
	} else {
		set enauser [join [find enauser $router] ""]
		if { "$enauser" == "" } { set enauser $ruser }
	}

	# Figure out prompts
	set u_prompt [find userprompt $router]
	if { "$u_prompt" == "" } {
		set u_prompt "(Username|Login|login|user name|User|User name):"
	} else {
		set u_prompt [join [lindex $u_prompt 0] ""]
	}
	set p_prompt [find passprompt $router]
	if { "$p_prompt" == "" } {
		set p_prompt "(\[Pp]assword|passwd|Enter password for \[^ :]+):"
	} else {
		set p_prompt [join [lindex $p_prompt 0] ""]
	}
	set e_prompt [find enableprompt $router]
	if { "$e_prompt" == "" } {
		set e_prompt "\[Pp]assword:"
	} else {
		set e_prompt [join [lindex $e_prompt 0] ""]
	}

	# Figure out identity file to use
	set identfile [join [lindex [find identity $router] 0] ""]

	# Figure out passphrase to use
	if {[info exists avpassphrase]} {
		set passphrase $avpassphrase
	} else {
		set passphrase [join [lindex [find passphrase $router] 0] ""]
	}
	if { ! [string length "$passphrase"]} {
		set passphrase $passwd
	}

	# Figure out cypher type
	if {[info exists cypher]} {
		# command line cypher type
		set cyphertype $cypher
	} else {
		set cyphertype [find cyphertype $router]
		if { "$cyphertype" == "" } { set cyphertype "3des" }
	}

	# Figure out connection method
	set cmethod [find method $router]
	if { "$cmethod" == "" } { set cmethod {{ssh} {telnet}} }

	# Figure out the SSH executable name
	set sshcmd [join [lindex [find sshcmd $router] 0] ""]
	if { "$sshcmd" == "" } { set sshcmd {ssh} }
	
	# if [-mM], skip do not login
	if { $do_cloginrcdbg > 0 } { continue; }
	
	# Login to the router
	if {[login $router $ruser $userpswd $passwd $enapasswd $cmethod $cyphertype $identfile]} {
		incr exitval
		# if login failed or rsh was unsuccessful, move on to the next device
		continue
	}

	# Disable smart and interactive before send others commands
	# (MA5600)
	#send "undo smart\r"
	#expect -re $prompt  {}
	#send "undo interactive\r"
	#expect -re $prompt  {}

	if { $enable } {
		if {[do_enable $enauser $enapasswd]} {
			if { $do_command || $do_script } {
				incr exitval
				catch {close}; catch {wait};
				continue
			}
		}
	}
	
	# we are logged in, now figure out the full prompt
	set prompt [get_prompt $prompt]
	
	# H3C:
	# Disable log junk being sent to terminal: must be done before $enacmd
	# is run.  It would be nice for this to be setable in .cloginrc
	send "undo terminal monitor\r"
	expect -re $prompt  {}

	if { $do_command || $do_script } { 
		# Turn session paging off
		# Comware 5 only.
		# Comware 3 models have a screen-length command that only works on
		# a vty basis
		# clogin does this only within the do_script clause below, but I can't
		# see why you wouldn't want it here, covering do_command too
		send "screen-length disable\r"
		expect -re $prompt  {}
	}

	if { $do_command } {
		if {[run_commands $prompt $command]} {
			incr exitval
			continue
		}
	} elseif { $do_script } {
		expect -re $prompt	  {}
		source $sfile
		catch {close};
	} else {
		label $router
		log_user 1
		interact
	}

	# End of for each router
	catch {wait};
	sleep 0.3
}
exit $exitval

